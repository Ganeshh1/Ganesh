>>> l=[1,2]
>>> l
[1, 2]
>>> for i in l:
... print(i)
  File "<stdin>", line 2
    print(i)
        ^
IndentationError: expected an indented block
>>> for i in l:
...     print(i)
... 
1
2
>>> l.extend("ganesh")
>>> l
[1, 2, 'g', 'a', 'n', 'e', 's', 'h']
>>> l.append("ganesh")
>>> l
[1, 2, 'g', 'a', 'n', 'e', 's', 'h', 'ganesh']
>>> for i in l:
...     print(i,len(i))
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
TypeError: object of type 'int' has no len()
>>> z=l.copy()
>>> z
[1, 2, 'g', 'a', 'n', 'e', 's', 'h', 'ganesh']
>>> z.items()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'items'
>>> z=l.copy().items()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'items'
>>> l.items()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'items'
>>> x=input("pls enter a number")
pls enter a number25
>>> x=int(x)
>>> x
25
>>> if(x<0):
...     x=0
...     print("Negative")
... elif x==0:
...     print("zero")
... else:
...     print("More")
... 
More
>>> for i in l:
...     print(i)
... 
1
2
g
a
n
e
s
h
ganesh
>>> for i,j in l.copy().items():
...     if j==i:
...     del l[i]
  File "<stdin>", line 3
    del l[i]
      ^
IndentationError: expected an indented block
>>> for i,j in l.copy().items():
...     if j==i:
...             del l[i]
... 
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'list' object has no attribute 'items'
>>> a = ['Mary', 'had', 'a', 'little', 'lamb']
>>> for i in range(len(a)):
...     print(i,a[i])
... 
0 Mary
1 had
2 a
3 little
4 lamb
>>> print(range(0,10))
range(0, 10)
>>> list(range(0,10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> for i in range(0,10):
...     if(i==8):
...             print(i)
...             break
...     else:
...             print("hello")
... 
hello
hello
hello
hello
hello
hello
hello
hello
8
>>> def g(m):
...     r=[]
...     for i in range(1,m):
...             r.append(i)
...     print(r)
... 
>>> g(10)
[1, 2, 3, 4, 5, 6, 7, 8, 9]
l=1;
>>> def f(m):
...     for i in range(0,m):
...             l=l*i
...             print(l)
... 
>>> f(10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in f
UnboundLocalError: local variable 'l' referenced before assignment
>>> def f(m):
...     l=1
...     for i in range(0,m):
...             l=l*i
...             print(l)
... 
>>> f(10)
0
0
0
0
0
0
0
0
0
0
>>> def f(m):
... ...     l=1
  File "<stdin>", line 2
    ...     l=1
      ^
IndentationError: expected an indented block
>>> ...     for i in range(0,m):
  File "<stdin>", line 1
    ...     for i in range(0,m):
              ^
SyntaxError: invalid syntax
>>> ...             l=l*i
  File "<stdin>", line 1
    ...             l=l*i
                    ^
SyntaxError: invalid syntax
>>> ...             print(l)
  File "<stdin>", line 1
    ...             print(l)
                        ^
SyntaxError: invalid syntax
>>> def f(m):
... ...     l=1
  File "<stdin>", line 2
    ...     l=1
      ^
IndentationError: expected an indented block
>>> ...     for i in range(0,m):
  File "<stdin>", line 1
    ...     for i in range(0,m):
              ^
SyntaxError: invalid syntax
>>> ...             l=l*i
  File "<stdin>", line 1
    ...             l=l*i
                    ^
SyntaxError: invalid syntax
>>> ...             print(l)
  File "<stdin>", line 1
    ...             print(l)
                        ^
SyntaxError: invalid syntax
>>> clear
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'clear' is not defined
>>> for i in range(0,10):
...     print(l=l*i)
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
TypeError: 'l' is an invalid keyword argument for this function
>>> l=1
>>> for i in range(1,9):
...     print(l=l*i)
... 
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
TypeError: 'l' is an invalid keyword argument for this function
>>> for i in range(1,9):
...     print(l*i)
... 
1
2
3
4
5
6
7
8
>>> def f():
...     print("good")
... 
>>> f()
good
>>> def g(m):
...     for i in range(1,m):
...             
... 
  File "<stdin>", line 4
    
    ^
IndentationError: expected an indented block
>>> def g(m):
...     r=[]
...     for i in range(1,m):
...             r.append(i)
... 
>>> g(10)
>>> r
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'r' is not defined
>>> def g(m):
...     r=[]
...     for i in range(1,m):
...             r.append(i)
...     print(r)
... 
>>> g(10)
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> good
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'good' is not defined
>>> "good"
'good'
>>> def f(v,z=10,x=100):
...     print(v,x,v)
...     for i in range(z,x,v):
...             print(i)
... 
>>> f(10)
10 100 10
10
20
30
40
50
60
70
80
90
>>> f(2,5,10)
2 10 2
5
7
9
>>> f(-2,-5,-10)
-2 -10 -2
-5
-7
-9
>>> f(-2,-5,10)
-2 10 -2
>>> f(2,-5,-10)
2 -10 2
>>> f(2,-5,0)
2 0 2
-5
-3
-1
>>> i=1
>>> def h(a=i):
...     print(a)
... 
>>> h()
1
>>> i=10
>>> h()
1
>>> def f(10,l=[]):
  File "<stdin>", line 1
    def f(10,l=[]):
           ^
SyntaxError: invalid syntax
>>> def f(n,l=[]):
...     l.append(n)
...     print(l)
... 
>>> f(1)
[1]
>>> f(10)
[1, 10]
>>> for i in range(5):
...     f(i)
... 
[1, 10, 0]
[1, 10, 0, 1]
[1, 10, 0, 1, 2]
[1, 10, 0, 1, 2, 3]
[1, 10, 0, 1, 2, 3, 4]
>>> "ganesh.join("kumar")
  File "<stdin>", line 1
    "ganesh.join("kumar")
                      ^
SyntaxError: invalid syntax
>>> "ganesh".join("kumar")
'kganeshuganeshmganeshaganeshr'
>>> "ganesh".join("\/")
'\\ganesh/'
>>> "ganesh".join("\/")
'\\ganesh/'
>>> "ganesh".join("\")
  File "<stdin>", line 1
    "ganesh".join("\")
                     ^
SyntaxError: EOL while scanning string literal
>>> "ganesh".join("/")
'/'
>>> "ganesh".join("1")
'1'
>>> "ganesh".join("kumar")
'kganeshuganeshmganeshaganeshr'
>>> "ganesh".join("kumar\/")
'kganeshuganeshmganeshaganeshrganesh\\ganesh/'
>>> "/".join("ganesh)
  File "<stdin>", line 1
    "/".join("ganesh)
                    ^
SyntaxError: EOL while scanning string literal
>>> "/".join("ganesh")
'g/a/n/e/s/h'
>>> "".join(['1','11']
... 
... 
... ganesh
  File "<stdin>", line 4
    ganesh
         ^
SyntaxError: invalid syntax
>>> "".join(['1','11'])
'111'
>>> l=["abi",1,2,3,4,2354]
>>> l
['abi', 1, 2, 3, 4, 2354]
>>> def f(i,*a,**b):
...     print(i)
...     for j in a:
...             print(j)
...     for k,x in b:
...             print(k,b[x])
... 
>>>def f():
...	"""hiihasoihasajsdljs"""
...
>>>print(f().__doc__)
'hiihasoihasajsdljs'

